buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        // Make sure this version matches the one included in Kotlin for Forge
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.7.20'
        // OPTIONAL Gradle plugin for Kotlin Serialization
        classpath 'org.jetbrains.kotlin:kotlin-serialization:1.7.20'
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "org.jetbrains.kotlin.jvm"
    id "com.matthewprenger.cursegradle"
    id "com.modrinth.minotaur"
}

apply from: '../gradle-scripts/publish-curseforge.gradle'

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        mixinConfig "valkyrienskies-common.mixins.json"
        mixinConfig "valkyrienskies-forge.mixins.json"
        convertAccessWideners.set(true)
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
    }
    mixin {
        defaultRefmapName = "valkyrienskies-refmap.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
    maven {
        name = 'Kotlin for Forge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
    }
    maven { url = "https://cursemaven.com" }
    mavenCentral()
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"

    common(project(path: ":common", configuration: "namedElements")) {
        transitive = false
    }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) {
        transitive = false
    }

    modCompileOnly("curse.maven:flywheel-486392:3934664")
    modCompileOnly("curse.maven:create-328085:4007544")
    
    // Manually specify kotlin version
    forgeRuntimeLibrary('org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.7.20')
    forgeRuntimeLibrary('org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4')

    // Cloth for config
    modImplementation("me.shedaniel.cloth:cloth-config-forge:6.3.81")

    // Shade vs-core
    implementation("org.valkyrienskies.core:vs-core:${rootProject.vs_core_version}")
    shadowCommon("org.valkyrienskies.core:vs-core:${rootProject.vs_core_version}") {
        transitive = false
    }

    // region Manually include every single dependency of vs-core (total meme)

    shadowCommon("org.valkyrienskies:physics_api_krunch:1.0.0+08a9f6959e") {
        transitive = false
    }

    shadowCommon("org.valkyrienskies:physics_api:1.0.0+26dee3aa54") {
        transitive = false
    }

    include("javax.inject:javax.inject:1")

    include("org.jetbrains.kotlin:kotlin-reflect:1.7.21")
    include("org.jetbrains.kotlin:kotlin-stdlib:1.7.21")
    include("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4")
    include("org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:1.6.4")
    include("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.7.21")
    include("org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.7.21")
    include("org.jetbrains.kotlin:kotlin-stdlib-common:1.7.21")

    // JOML for Math
    include("org.joml:joml:1.10.4")
    include("org.joml:joml-primitives:1.10.0")

    // Apache Commons Math for Linear Programming
    include("org.apache.commons:commons-math3:3.6.1")

    // Jackson Binary Dataformat for Object Serialization
    def jacksonVersion = '2.13.3'
    include("com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion")
    include("com.fasterxml.jackson.module:jackson-module-parameter-names:$jacksonVersion")
    include("com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:$jacksonVersion")
    include("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
    include("com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion")
    include("com.fasterxml.jackson.core:jackson-core:$jacksonVersion")
    include("com.github.Rubydesic:jackson-kotlin-dsl:1.2.0")

    include("com.networknt:json-schema-validator:1.0.71")
    include("com.ethlo.time:itu:1.7.0")
    include("com.github.imifou:jsonschema-module-addon:1.2.1")
    include("com.github.victools:jsonschema-module-jackson:4.25.0")
    include("com.github.victools:jsonschema-generator:4.25.0")
    include("com.fasterxml:classmate:1.5.1")
    include("com.flipkart.zjsonpatch:zjsonpatch:0.4.11")

    include("com.google.dagger:dagger:2.43.2")

    // endregion

    implementation("org.valkyrienskies:valkyrien-dependency-downloader:4.2")
    include("org.valkyrienskies:valkyrien-dependency-downloader:4.2")
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"
    // Exclude dummy Optifine classes
    exclude "net/optifine/**"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            groupId = "org.valkyrienskies"
            version = project.version
            artifactId = rootProject.archives_base_name + "-" + project.name
            // Publish the dev shadow jar to maven
            artifact(shadowJar) {
                classifier "dev-shadow"
            }
            from components.java
        }
    }
}
